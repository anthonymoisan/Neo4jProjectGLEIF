=== Structuration de la base ===================

CREATE CONSTRAINT ON (e:Entity) ASSERT e.code_LEI IS UNIQUE;
CREATE INDEX ON :Country(name);
CREATE INDEX ON :Entity(name);
CREATE INDEX ON :Active(name);

=== Commandes d'import des noeuds (GLIF niveau 1) ==============
=== Changer le nom du fichier fonction du cas

USING PERIODIC COMMIT 500 

LOAD CSV WITH HEADERS FROM 'file:///Niveau1_Small.csv' 
AS ligne FIELDTERMINATOR ';' 

   MERGE (e:Entity {code_LEI: ligne.Code_LEI})
   SET e.name = ligne.Legal_Name
   SET e.last_update = apoc.date.format(apoc.date.parse(ligne.Last_Update_Date, 'ms', 'dd/MM/yyyy'))

   MERGE (act:Active {name:ligne.Status_Actif})

   MERGE (country:Country {name: ligne.Country_Code})

MERGE (e)-[:ACTIVE]-(act) 

MERGE (e)-[:REGISTERED]-(country)


=== Commandes d'import des relations (GLIF niveau 2) ==============
=== Changer le nom du fichier fonction du cas

USING PERIODIC COMMIT 500 

LOAD CSV WITH HEADERS FROM 'file:///Niveau2_Small.csv' 
AS ligne FIELDTERMINATOR ';' 

   MATCH (startNode:Entity{ code_LEI: ligne.Start_Node}),(endNode:Entity { code_LEI: ligne.End_Node})
   MERGE (startNode)-[:RELATIONSHIP { role: ligne.Relation_ShipeType }]->(endNode)

=== Armageddon : requete supprimant tous les noeuds

MATCH (n)
OPTIONAL MATCH (n)-[r]-()
DELETE n,r


=== Supprime les contraintes d'intégrité et index sur les noeuds

DROP INDEX ON :Entity(name);
DROP INDEX ON :Country(name);
DROP INDEX ON :Entity(name);
DROP CONSTRAINT ON (e:Entity) ASSERT e.code_LEI IS UNIQUE;
